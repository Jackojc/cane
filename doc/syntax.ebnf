// Lexical Grammar
literal ::= ? [0-9_]+ ? | ? 0x[0-9A-z_]+ ? | ? 0b[0-1_]+ ?
identifier ::= ? \S+ ?
comment ::= ? #.+$ ?


// Sequences
sequence ::= ( '!' | '.' )*
euclidean ::= [ ':' ] <lit_expr> ':' <lit_expr>


// Literal Operators
lit_infix ::= <expr> ( '+' | '-' | '*' | '/' | '%' ) <lit_expr>
lit_prefix ::= ( '+' | '-' | "len" ) <expr>

lit_expr ::= <lit_prefix> | <lit_infix>


// Sequence Operators
seq_infix_expr ::= <expr> ( '|' | '&' | '^' | ',' | "sync" | "fit" ) <expr>
seq_infix_lit ::= <expr> ( '<<' | '>>' | '**' | '@' ) <lit_expr>
seq_infix ::= <seq_infix_expr> | <seq_infix_lit>

seq_prefix ::= ( '~' | '\'' ) <expr>
seq_postfix ::= <expr> ( '<' | '>' | '?' | "car" | "cdr" )

chain ::= <expr> '=>' <identifier>
notes ::= <expr> '[' <literal>+ ']'

expr ::=
	<identifier> |
	<sequence> |
	<seq_prefix> |
	<seq_infix> |
	<seq_postfix> |
	<chain> |
	<notes> |
	'(' <expr> ')'

// Statements
sink ::= <expr> '~>' ( <literal> | <identifier> )

let ::= "let" <identifier> <lit_expr>
alias ::= "alias" <identifier> <literal>

stat ::= ( <sink> | <let> | <alias> | "clear" )
program ::= <stat>*
