// Lexical Grammar
literal ::= ? [0-9_]+ ? | ? 0x[0-9A-z_]+ ? | ? 0b[0-1_]+ ?
identifier ::= ? \S+ ?
comment ::= ? #.+$ ?

// Sequences
sequence ::= ( '!' | '.' )*
euclidean ::= [ ':' ] <lit_expr> ':' <lit_expr>

// Literal Expressions
lit_infix       ::= <lit_expr> ( '+' | '-' | '*' | '/' | '%' ) <lit_expr>
lit_prefix_expr ::= ( '+' | '-' ) <lit_expr>
lit_prefix_seq  ::= ( "len" | "bpm" ) <seq_expr>
lit_expr ::=
	<lit_prefix> |
	<lit_infix_expr> |
	<lit_prefix_seq> |
	'(' <lit_expr> ')'

// Sequence Expressions
seq_prefix ::= ( '~' | '\'' ) <seq_expr>

seq_infix_expr  ::= <seq_expr> ( '|' | '&' | '^' | ',' | "sync" | "fit" ) <seq_expr>
seq_infix_lit   ::= <seq_expr> ( '<<' | '>>' | '**' | '@' ) <lit_expr>
seq_infix_ident ::= <seq_expr> ( '=>' ) <identifier>
seq_infix       ::= <seq_infix_expr> | <seq_infix_lit> | <seq_infix_ident>

seq_postfix ::= <seq_expr> ( '<' | '>' | '?' | "car" | "cdr" )

seq_expr ::=
	'$' <identifier> |
	<sequence> |
	<seq_prefix> |
	<seq_infix> |
	<seq_postfix> |
	'(' <seq_expr> ')'

// Channel Expressions
chan_infix_expr ::= <chan_expr> ( "wait" | "sync" ) <chan_expr>
chan_infix_lit  ::= <chan_expr> ( "repeat" ) <lit_expr>
chan_infix      ::= <chan_infix_expr> | <chan_infix_lit>

chan_postfix ::= <chan_expr> ( "drop" )

chan_expr ::=
	<seq_expr> '~>' ( <literal> | <identifier> ) |
	<chan_infix> |
	<chan_postfix> |
	'{' <chan_expr> '}'

// Statements
let   ::= "let" <identifier> <lit_expr>
alias ::= "alias" <identifier> <literal>
def   ::= "def" <identifier> <chan_expr>

stat ::= <let> | <alias> | <def> | <chan_expr>

program ::= <stat>*
